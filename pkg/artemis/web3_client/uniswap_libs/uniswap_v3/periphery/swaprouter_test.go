package periphery

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/stretchr/testify/assert"
	"github.com/zeus-fyi/gochain/web3/accounts"
	uniswap_core_entities "github.com/zeus-fyi/olympus/pkg/artemis/web3_client/uniswap_libs/uniswap_core/entities"
	"github.com/zeus-fyi/olympus/pkg/artemis/web3_client/uniswap_libs/uniswap_v3/entities"
	"github.com/zeus-fyi/olympus/pkg/artemis/web3_client/uniswap_libs/uniswap_v3/utils"
)

func TestSwapCallParametersSingleTradeInput(t *testing.T) {
	pool_0_1 := makePool(token0, token1)
	pool_1_weth := makePool(token1, weth)
	// pool_0_2 := makePool(token0, token2)
	// pool_0_3 := makePool(token0, token3)
	// pool_2_3 := makePool(token2, token3)
	// pool_3_weth := makePool(token3, weth)
	// pool_1_3 := makePool(token3, token1)

	slippageTolerance := uniswap_core_entities.NewPercent(big.NewInt(1), big.NewInt(100))
	recipient := accounts.HexToAddress("0x0000000000000000000000000000000000000003")
	deadline := big.NewInt(123)

	// single trade input
	// single-hop exact input
	r, _ := entities.NewRoute([]*entities.Pool{pool_0_1}, token0, token1)
	trade, _ := entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err := SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0x414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// single-hop exact output
	r, _ = entities.NewRoute([]*entities.Pool{pool_0_1}, token0, token1)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token1, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xdb3e2198000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000670000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// multi-hop exact input
	r, _ = entities.NewRoute([]*entities.Pool{pool_0_1, pool_1_weth}, token0, weth)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xc04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// multi-hop exact output
	r, _ = entities.NewRoute([]*entities.Pool{pool_0_1, pool_1_weth}, token0, weth)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(weth, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xf28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000690000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// ETH in exact input
	r, _ = entities.NewRoute([]*entities.Pool{pool_1_weth}, ether, token1)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(ether, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0x414bf389000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x64", utils.ToHex(params.Value))

	// ETH in exact output
	r, _ = entities.NewRoute([]*entities.Pool{pool_1_weth}, ether, token1)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token1, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x67", utils.ToHex(params.Value))

	// ETH out exact input
	r, _ = entities.NewRoute([]*entities.Pool{pool_1_weth}, token1, ether)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token1, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c0000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// ETH out exact output
	r, _ = entities.NewRoute([]*entities.Pool{pool_1_weth}, token1, ether)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(ether, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104db3e21980000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// sqrtPriceLimitX96
	r, _ = entities.NewRoute([]*entities.Pool{pool_0_1}, token0, token1)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
		SqrtPriceLimitX96: new(big.Int).Exp(big.NewInt(2), big.NewInt(128), nil),
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0x414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000100000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// fee with eth out
	r, _ = entities.NewRoute([]*entities.Pool{pool_1_weth}, token1, ether)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token1, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
		Fee: &FeeOptions{
			Fee:       uniswap_core_entities.NewPercent(big.NewInt(5), big.NewInt(1000)),
			Recipient: recipient,
		},
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000849b2c0a37000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// fee with eth in using exact output
	r, _ = entities.NewRoute([]*entities.Pool{pool_1_weth}, ether, token1)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token1, big.NewInt(10)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
		Fee: &FeeOptions{
			Fee:       uniswap_core_entities.NewPercent(big.NewInt(5), big.NewInt(1000)),
			Recipient: recipient,
		},
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4e0e189a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x0c", utils.ToHex(params.Value))

	// fee
	r, _ = entities.NewRoute([]*entities.Pool{pool_0_1}, token0, token1)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
		Fee: &FeeOptions{
			Fee:       uniswap_core_entities.NewPercent(big.NewInt(5), big.NewInt(1000)),
			Recipient: recipient,
		},
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4e0e189a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))
}

func TestSwapCallParametersMultipleTradeInput(t *testing.T) {
	pool_0_1 := makePool(token0, token1)
	pool_1_weth := makePool(token1, weth)
	pool_0_2 := makePool(token0, token2)
	pool_0_3 := makePool(token0, token3)
	pool_2_3 := makePool(token2, token3)
	pool_3_weth := makePool(token3, weth)
	pool_1_3 := makePool(token3, token1)

	slippageTolerance := uniswap_core_entities.NewPercent(big.NewInt(1), big.NewInt(100))
	recipient := accounts.HexToAddress("0x0000000000000000000000000000000000000003")
	deadline := big.NewInt(123)

	// multiple trade input
	// two single-hop exact input
	r, _ := entities.NewRoute([]*entities.Pool{pool_0_1}, token0, token1)
	trade, _ := entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err := SwapCallParameters([]*entities.Trade{trade, trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// one single-hop one multi-hop exact input
	r1, _ := entities.NewRoute([]*entities.Pool{pool_0_3}, token0, token3)
	trade1, _ := entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	r2, _ := entities.NewRoute([]*entities.Pool{pool_0_2, pool_2_3}, token0, token3)
	trade2, _ := entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// two multi-hop exact input
	r1, _ = entities.NewRoute([]*entities.Pool{pool_0_1, pool_1_3}, token0, token3)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_0_2, pool_2_3}, token0, token3)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// ETH in exact input
	r1, _ = entities.NewRoute([]*entities.Pool{pool_1_weth, pool_1_3}, ether, token3)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(ether, big.NewInt(100)), uniswap_core_entities.ExactInput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_3_weth}, ether, token3)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(ether, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f0000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0xc8", utils.ToHex(params.Value))

	// ETH in exact output
	r1, _ = entities.NewRoute([]*entities.Pool{pool_1_weth, pool_1_3}, ether, token3)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_3_weth}, ether, token3)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0xd0", utils.ToHex(params.Value))

	// ETH out exact input
	r1, _ = entities.NewRoute([]*entities.Pool{pool_1_3, pool_1_weth}, token3, ether)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactInput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_3_weth}, token3, ether)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// ETH out exact output
	r1, _ = entities.NewRoute([]*entities.Pool{pool_1_3, pool_1_weth}, token3, ether)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(ether, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_3_weth}, token3, ether)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(ether, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000690000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e21980000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// two single-hop exact output
	r, _ = entities.NewRoute([]*entities.Pool{pool_0_1}, token0, token1)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token1, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade, trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// one single-hop one multi-hop exact output
	r1, _ = entities.NewRoute([]*entities.Pool{pool_0_3}, token0, token3)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_0_2, pool_2_3}, token0, token3)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// two multi-hop exact output
	r1, _ = entities.NewRoute([]*entities.Pool{pool_0_1, pool_1_3}, token0, token3)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_0_2, pool_2_3}, token0, token3)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// different token in fails
	r1, _ = entities.NewRoute([]*entities.Pool{pool_2_3}, token2, token3)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token2, big.NewInt(100)), uniswap_core_entities.ExactInput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_0_1}, token0, token1)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	_, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	assert.EqualError(t, err, ErrTokenInDiff.Error())

	// different token out fails
	r1, _ = entities.NewRoute([]*entities.Pool{pool_0_3}, token0, token3)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_0_1, pool_1_weth}, token0, weth)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	_, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	assert.EqualError(t, err, ErrTokenOutDiff.Error())

	// sqrtPriceLimitX96
	r, _ = entities.NewRoute([]*entities.Pool{pool_0_1}, token0, token1)
	trade, _ = entities.FromRoute(r, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade, trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
		SqrtPriceLimitX96: new(big.Int).Exp(big.NewInt(2), big.NewInt(128), nil),
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// fee with eth out
	r1, _ = entities.NewRoute([]*entities.Pool{pool_1_3, pool_1_weth}, token3, ether)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactInput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_3_weth}, token3, ether)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
		Fee: &FeeOptions{
			Fee:       uniswap_core_entities.NewPercent(big.NewInt(5), big.NewInt(1000)),
			Recipient: recipient,
		},
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000849b2c0a3700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// fee with eth in using exact output
	r1, _ = entities.NewRoute([]*entities.Pool{pool_1_weth, pool_1_3}, ether, token3)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_3_weth}, ether, token3)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)), uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
		Fee: &FeeOptions{
			Fee:       uniswap_core_entities.NewPercent(big.NewInt(5), big.NewInt(1000)),
			Recipient: recipient,
		},
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4e0e189a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0xd0", utils.ToHex(params.Value))

	// fee
	r1, _ = entities.NewRoute([]*entities.Pool{pool_0_1, pool_1_3}, token0, token3)
	trade1, _ = entities.FromRoute(r1, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_0_2, pool_2_3}, token0, token3)
	trade2, _ = entities.FromRoute(r2, uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)), uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade1, trade2}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
		Fee: &FeeOptions{
			Fee:       uniswap_core_entities.NewPercent(big.NewInt(5), big.NewInt(1000)),
			Recipient: recipient,
		},
	})
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000003000bb800000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4e0e189a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000be00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))
}

func TestSwapCallParametersTradeWithMultipleRoutes(t *testing.T) {
	pool_0_1 := makePool(token0, token1)
	pool_1_weth := makePool(token1, weth)
	pool_0_2 := makePool(token0, token2)
	pool_0_3 := makePool(token0, token3)
	pool_2_3 := makePool(token2, token3)
	pool_3_weth := makePool(token3, weth)
	pool_1_3 := makePool(token3, token1)

	slippageTolerance := uniswap_core_entities.NewPercent(big.NewInt(1), big.NewInt(100))
	recipient := accounts.HexToAddress("0x0000000000000000000000000000000000000003")
	deadline := big.NewInt(123)

	// trade with multiple routes
	// one single-hop one multi-hop exact input
	r1, _ := entities.NewRoute([]*entities.Pool{pool_0_3}, token0, token3)
	r2, _ := entities.NewRoute([]*entities.Pool{pool_0_2, pool_2_3}, token0, token3)
	trade, _ := entities.FromRoutes([]*entities.WrappedRoute{
		{
			Amount: uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)),
			Route:  r1,
		},
		{
			Amount: uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)),
			Route:  r2,
		},
	}, uniswap_core_entities.ExactInput)
	params, err := SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Error(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// two multi-hop exact input
	r1, _ = entities.NewRoute([]*entities.Pool{pool_0_1, pool_1_3}, token0, token3)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_0_2, pool_2_3}, token0, token3)
	trade, _ = entities.FromRoutes([]*entities.WrappedRoute{
		{
			Amount: uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)),
			Route:  r1,
		},
		{
			Amount: uniswap_core_entities.FromRawAmount(token0, big.NewInt(100)),
			Route:  r2,
		},
	}, uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Error(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// ETH in exact input
	r1, _ = entities.NewRoute([]*entities.Pool{pool_1_weth, pool_1_3}, ether, token3)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_3_weth}, ether, token3)
	trade, _ = entities.FromRoutes([]*entities.WrappedRoute{
		{
			Amount: uniswap_core_entities.FromRawAmount(ether, big.NewInt(100)),
			Route:  r1,
		},
		{
			Amount: uniswap_core_entities.FromRawAmount(ether, big.NewInt(100)),
			Route:  r2,
		},
	}, uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Error(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f0000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0xc8", utils.ToHex(params.Value))

	// ETH in exact output
	r1, _ = entities.NewRoute([]*entities.Pool{pool_1_weth, pool_1_3}, ether, token3)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_3_weth}, ether, token3)
	trade, _ = entities.FromRoutes([]*entities.WrappedRoute{
		{
			Amount: uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)),
			Route:  r1,
		},
		{
			Amount: uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)),
			Route:  r2,
		},
	}, uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Error(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0xd0", utils.ToHex(params.Value))

	// ETH out exact input
	r1, _ = entities.NewRoute([]*entities.Pool{pool_1_3, pool_1_weth}, token3, ether)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_3_weth}, token3, ether)
	trade, _ = entities.FromRoutes([]*entities.WrappedRoute{
		{
			Amount: uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)),
			Route:  r1,
		},
		{
			Amount: uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)),
			Route:  r2,
		},
	}, uniswap_core_entities.ExactInput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Error(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// ETH out exact output
	r1, _ = entities.NewRoute([]*entities.Pool{pool_1_3, pool_1_weth}, token3, ether)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_3_weth}, token3, ether)
	trade, _ = entities.FromRoutes([]*entities.WrappedRoute{
		{
			Amount: uniswap_core_entities.FromRawAmount(ether, big.NewInt(100)),
			Route:  r1,
		},
		{
			Amount: uniswap_core_entities.FromRawAmount(ether, big.NewInt(100)),
			Route:  r2,
		},
	}, uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Error(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000690000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e21980000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// one single-hop one multi-hop exact output
	r1, _ = entities.NewRoute([]*entities.Pool{pool_0_3}, token0, token3)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_0_2, pool_2_3}, token0, token3)
	trade, _ = entities.FromRoutes([]*entities.WrappedRoute{
		{
			Amount: uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)),
			Route:  r1,
		},
		{
			Amount: uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)),
			Route:  r2,
		},
	}, uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Error(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))

	// two multi-hop exact output
	r1, _ = entities.NewRoute([]*entities.Pool{pool_0_1, pool_1_3}, token0, token3)
	r2, _ = entities.NewRoute([]*entities.Pool{pool_0_2, pool_2_3}, token0, token3)
	trade, _ = entities.FromRoutes([]*entities.WrappedRoute{
		{
			Amount: uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)),
			Route:  r1,
		},
		{
			Amount: uniswap_core_entities.FromRawAmount(token3, big.NewInt(100)),
			Route:  r2,
		},
	}, uniswap_core_entities.ExactOutput)
	params, err = SwapCallParameters([]*entities.Trade{trade}, &SwapOptions{
		SlippageTolerance: slippageTolerance,
		Recipient:         recipient,
		Deadline:          deadline,
	})
	if err != nil {
		t.Error(err)
	}
	assert.Equal(t, "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hexutil.Encode(params.Calldata))
	assert.Equal(t, "0x00", utils.ToHex(params.Value))
}
