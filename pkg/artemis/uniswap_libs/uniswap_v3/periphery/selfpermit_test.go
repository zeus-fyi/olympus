package periphery

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/stretchr/testify/assert"
)

func TestEncodePermit(t *testing.T) {
	var (
		byte32r [32]byte
		byte32s [32]byte
		r, _    = hexutil.Decode("0x0000000000000000000000000000000000000000000000000000000000000001")
		s, _    = hexutil.Decode("0x0000000000000000000000000000000000000000000000000000000000000002")
	)
	copy(byte32r[:], r)
	copy(byte32s[:], s)

	// encode with standard permit
	sargs := &StandardPermitArguments{
		V:        0,
		R:        byte32r,
		S:        byte32s,
		Amount:   big.NewInt(123),
		Deadline: big.NewInt(123),
	}
	opts := &PermitOptions{
		StandardPermitArguments: sargs,
	}
	encoded, err := EncodePermit(token0, opts)
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0xf3995c670000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002", hexutil.Encode(encoded))

	// encode with allowed permit
	aargs := &AllowedPermitArguments{
		V:      0,
		R:      byte32r,
		S:      byte32s,
		Nonce:  big.NewInt(123),
		Expiry: big.NewInt(123),
	}
	opts = &PermitOptions{
		AllowedPermitArguments: aargs,
	}
	encoded, err = EncodePermit(token0, opts)
	if err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, "0x4659a4940000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002", hexutil.Encode(encoded))
}
